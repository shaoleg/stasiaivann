(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('ngx-cpf-cnpj', ['exports', '@angular/core', '@angular/forms'], factory) :
    (global = global || self, factory(global['ngx-cpf-cnpj'] = {}, global.ng.core, global.ng.forms));
}(this, (function (exports, core, forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var NgxCpfCnpj = /** @class */ (function () {
        function NgxCpfCnpj() {
        }
        NgxCpfCnpj.convertToCpfCnpj = function (num) {
            if (num && num.length > 3 && num.length <= 14) {
                var replaceByLength = {
                    4: { searchValue: /(\d+)(\d{3})/, newValue: "$1.$2" },
                    5: { searchValue: /(\d+)(\d{3})/, newValue: "$1.$2" },
                    6: { searchValue: /(\d+)(\d{3})/, newValue: "$1.$2" },
                    7: { searchValue: /(\d+)(\d{3})(\d{3})/, newValue: "$1.$2.$3" },
                    8: { searchValue: /(\d+)(\d{3})(\d{3})/, newValue: "$1.$2.$3" },
                    9: { searchValue: /(\d+)(\d{3})(\d{3})/, newValue: "$1.$2.$3" },
                    10: {
                        searchValue: /(\d+)(\d{3})(\d{3})(\d{1})/,
                        newValue: "$1.$2.$3-$4"
                    },
                    11: {
                        searchValue: /(\d+)(\d{3})(\d{3})(\d{2})/,
                        newValue: "$1.$2.$3-$4"
                    },
                    12: {
                        searchValue: /(\d+)(\d{3})(\d{3})(\d{4})/,
                        newValue: "$1.$2.$3-$4"
                    },
                    13: {
                        searchValue: /(\d+)(\d{3})(\d{3})(\d{4})(\d{2})/,
                        newValue: "$1.$2.$3/$4-$5"
                    },
                    14: {
                        searchValue: /(\d+)(\d{3})(\d{3})(\d{4})(\d{2})/,
                        newValue: "$1.$2.$3/$4-$5"
                    }
                };
                num = num.toString();
                num = NgxCpfCnpj.getDigitos(num);
                var replaceObject = replaceByLength[num.length];
                num = num.replace(replaceObject.searchValue, replaceObject.newValue);
            }
            return num;
        };
        NgxCpfCnpj.getDigitos = function (value) {
            var regex = new RegExp("\\D", "g");
            return value.replace(regex, "");
        };
        NgxCpfCnpj.cpfIsValid = function (value) {
            // Só faz a validação se o texto não for vazio.
            // Se for vazio, validar campo requerido não é a responsabilidade desta validação
            if (value.length > 0) {
                var IsValid = false;
                var cpf = NgxCpfCnpj.getDigitos(value); // Obtém o texto digitado no campo, remove tudo menos os digitos
                if (cpf.length === 11) {
                    // Se digitou o CPF por completo
                    // Verificação dos CPF's que não respeitam a regra de validação mas não são válidos
                    var cpf_invalidos = [
                        "00000000000",
                        "11111111111",
                        "22222222222",
                        "33333333333",
                        "44444444444",
                        "55555555555",
                        "66666666666",
                        "77777777777",
                        "88888888888",
                        "99999999999"
                    ];
                    for (var i = 0; i < 10; i++) {
                        if (cpf === cpf_invalidos[i]) {
                            return IsValid;
                        }
                    }
                    // Calculando o Primeiro Dígito Verificador
                    var soma = 0; // Soma para o CPF "ABC.DEF.GHI-XZ": (A*10)+(B*9)+...+(H*3)+(I*2)
                    for (var i = 0; i < 9; i++) {
                        soma = soma + parseInt(cpf.charAt(i), 10) * (10 - i);
                    }
                    var dv = 0; // Primeiro dígito verificador (será zero se o resto da divisão de soma por 11 for < 2)
                    if (soma % 11 > 1) {
                        dv = 11 - (soma % 11);
                    }
                    if (parseInt(cpf.charAt(9), 10) !== dv) {
                        return IsValid;
                    }
                    // Calculando o Segundo Dígito Verificador
                    soma = 0; // Soma para o CPF "ABC.DEF.GHI-XZ": (A*11)+(B*10)+...+(H*4)+(I*3)+(X*2)
                    for (var i = 0; i < 10; i++) {
                        soma = soma + parseInt(cpf.charAt(i), 10) * (11 - i);
                    }
                    dv = 0; // Segundo dígito verificador (será zero se o resto da divisão de soma por 11 for < 2)
                    if (soma % 11 > 1) {
                        dv = 11 - (soma % 11);
                    }
                    if (parseInt(cpf.charAt(10), 10) !== dv) {
                        return IsValid;
                    }
                    IsValid = true;
                }
                return IsValid;
            }
            return true;
        };
        NgxCpfCnpj.cnpjIsValid = function (value) {
            // Só faz a validação se o texto não for vazio.
            // Se for vazio, validar campo requerido não é a responsabilidade desta validação
            if (value.length > 0) {
                var IsValid = false;
                var cnpj = NgxCpfCnpj.getDigitos(value); // Obtém o texto digitado no campo, remove tudo menos os digitos
                if (cnpj.length === 14) {
                    // Se digitou o CNPJ por completo
                    // Verificação do CNPJ que não respeita a regra de validação mas não são válidos
                    if (cnpj === "00000000000000") {
                        return IsValid;
                    }
                    // Calculando o Primeiro Dígito Verificador
                    var soma = 0; // Soma para o CNPJ "AB.CDE.FGH/IJKL-XZ": (A*5)+(B*4)+(C*3)+(D*2)+(E*9)+(F*8)+...+(K*3)+(L*2)
                    var mult = 5; // multiplicador
                    for (var i = 0; i < 12; i++) {
                        soma = soma + parseInt(cnpj.charAt(i), 10) * mult;
                        mult--; // decrementa o multiplicador
                        if (mult === 1) {
                            mult = 9;
                        } // volta o multiplicador para o valor 9 (para decrementar até o valor 2)
                    }
                    var dv = 0; // Primeiro dígito verificador (será zero se o resto da divisão de soma por 11 for < 2)
                    if (soma % 11 > 1) {
                        dv = 11 - (soma % 11);
                    }
                    if (parseInt(cnpj.charAt(12), 10) !== dv) {
                        return IsValid;
                    }
                    // Calculando o Segundo Dígito Verificador
                    soma = 0; // Soma para o CNPJ "AB.CDE.FGH/IJKL-XZ": (A*6)+(B*5)+(C*4)+(D*3)+(E*2)+(F*9)+...+(K*4)+(L*3)+(X*2)
                    mult = 6; // multiplicador
                    for (var i = 0; i < 13; i++) {
                        soma = soma + parseInt(cnpj.charAt(i), 10) * mult;
                        mult--; // decrementa o multiplicador
                        if (mult === 1) {
                            mult = 9;
                        } // volta o multiplicador para o valor 9 (para decrementar até o valor 2)
                    }
                    dv = 0; // Segundo dígito verificador (será zero se o resto da divisão de soma por 11 for < 2)
                    if (soma % 11 > 1) {
                        dv = 11 - (soma % 11);
                    }
                    if (parseInt(cnpj.charAt(13), 10) !== dv) {
                        return IsValid;
                    }
                    IsValid = true;
                }
                return IsValid;
            }
            return true;
        };
        return NgxCpfCnpj;
    }());

    var CpfCnpjValidatorDirective = /** @class */ (function () {
        function CpfCnpjValidatorDirective() {
            this.validator = this.cpfCnpjValidator();
        }
        CpfCnpjValidatorDirective_1 = CpfCnpjValidatorDirective;
        CpfCnpjValidatorDirective.prototype.validate = function (c) {
            return this.validator(c);
        };
        CpfCnpjValidatorDirective.prototype.cpfCnpjValidator = function () {
            return function (c) {
                var value = c.value;
                if (value != null) {
                    value = NgxCpfCnpj.getDigitos(value);
                    if (value.length === 11) {
                        if (NgxCpfCnpj.cpfIsValid(value)) {
                            return null;
                        }
                        else {
                            return {
                                cpfcnpjvalidator: {
                                    valid: false
                                }
                            };
                        }
                    }
                    else if (value.length === 14) {
                        if (NgxCpfCnpj.cnpjIsValid(value)) {
                            return null;
                        }
                        else {
                            return {
                                cpfcnpjvalidator: {
                                    valid: false
                                }
                            };
                        }
                    }
                }
                return {
                    cpfcnpjvalidator: {
                        valid: false
                    }
                };
            };
        };
        var CpfCnpjValidatorDirective_1;
        CpfCnpjValidatorDirective = CpfCnpjValidatorDirective_1 = __decorate([
            core.Directive({
                selector: "[nccCpfCnpjValidator] [ngModel]",
                providers: [
                    {
                        provide: forms.NG_VALIDATORS,
                        useExisting: CpfCnpjValidatorDirective_1,
                        multi: true
                    }
                ]
            }),
            __metadata("design:paramtypes", [])
        ], CpfCnpjValidatorDirective);
        return CpfCnpjValidatorDirective;
    }());

    var CpfCnpjMaskDirective = /** @class */ (function () {
        function CpfCnpjMaskDirective(renderer, el) {
            this.renderer = renderer;
            this.el = el;
        }
        CpfCnpjMaskDirective.prototype.onInput = function (event) {
            if (event.target.value.length <= 18) {
                this.renderer.setProperty(this.el.nativeElement, "value", NgxCpfCnpj.convertToCpfCnpj(event.target.value));
            }
        };
        CpfCnpjMaskDirective.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: core.ElementRef }
        ]; };
        __decorate([
            core.HostListener("input", ["$event"]),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], CpfCnpjMaskDirective.prototype, "onInput", null);
        CpfCnpjMaskDirective = __decorate([
            core.Directive({
                selector: "[nccCpfCnpjMask]"
            }),
            __metadata("design:paramtypes", [core.Renderer2, core.ElementRef])
        ], CpfCnpjMaskDirective);
        return CpfCnpjMaskDirective;
    }());

    var NgxCpfCnpjModule = /** @class */ (function () {
        function NgxCpfCnpjModule() {
        }
        NgxCpfCnpjModule = __decorate([
            core.NgModule({
                declarations: [CpfCnpjMaskDirective, CpfCnpjValidatorDirective],
                imports: [],
                exports: [CpfCnpjMaskDirective, CpfCnpjValidatorDirective]
            })
        ], NgxCpfCnpjModule);
        return NgxCpfCnpjModule;
    }());

    var CpfCnpjValidator = /** @class */ (function () {
        function CpfCnpjValidator() {
        }
        CpfCnpjValidator.validate = function (control) {
            return NgxCpfCnpj.cpfIsValid(control.value) ? null : { invalid: false };
        };
        return CpfCnpjValidator;
    }());

    exports.CpfCnpjMaskDirective = CpfCnpjMaskDirective;
    exports.CpfCnpjValidator = CpfCnpjValidator;
    exports.CpfCnpjValidatorDirective = CpfCnpjValidatorDirective;
    exports.NgxCpfCnpjModule = NgxCpfCnpjModule;
    exports.ɵa = NgxCpfCnpj;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-cpf-cnpj.umd.js.map
