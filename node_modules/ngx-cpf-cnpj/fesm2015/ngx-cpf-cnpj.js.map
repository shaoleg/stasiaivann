{"version":3,"file":"ngx-cpf-cnpj.js","sources":["ng://ngx-cpf-cnpj/lib/ngx-cpf-cnpj.ts","ng://ngx-cpf-cnpj/lib/cpf-cnpj-validator.directive.ts","ng://ngx-cpf-cnpj/lib/cpf-cnpj-mask.directive.ts","ng://ngx-cpf-cnpj/lib/ngx-cpf-cnpj.module.ts","ng://ngx-cpf-cnpj/lib/cpf-cnpj.validator.ts","ng://ngx-cpf-cnpj/public_api.ts","ng://ngx-cpf-cnpj/ngx-cpf-cnpj.ts"],"sourcesContent":["export class NgxCpfCnpj {\r\n  constructor() {}\r\n\r\n  public static convertToCpfCnpj(num) {\r\n    if (num && num.length > 3 && num.length <= 14) {\r\n      const replaceByLength = {\r\n        4: { searchValue: /(\\d+)(\\d{3})/, newValue: \"$1.$2\" },\r\n        5: { searchValue: /(\\d+)(\\d{3})/, newValue: \"$1.$2\" },\r\n        6: { searchValue: /(\\d+)(\\d{3})/, newValue: \"$1.$2\" },\r\n        7: { searchValue: /(\\d+)(\\d{3})(\\d{3})/, newValue: \"$1.$2.$3\" },\r\n        8: { searchValue: /(\\d+)(\\d{3})(\\d{3})/, newValue: \"$1.$2.$3\" },\r\n        9: { searchValue: /(\\d+)(\\d{3})(\\d{3})/, newValue: \"$1.$2.$3\" },\r\n        10: {\r\n          searchValue: /(\\d+)(\\d{3})(\\d{3})(\\d{1})/,\r\n          newValue: \"$1.$2.$3-$4\"\r\n        },\r\n        11: {\r\n          searchValue: /(\\d+)(\\d{3})(\\d{3})(\\d{2})/,\r\n          newValue: \"$1.$2.$3-$4\"\r\n        },\r\n        12: {\r\n          searchValue: /(\\d+)(\\d{3})(\\d{3})(\\d{4})/,\r\n          newValue: \"$1.$2.$3-$4\"\r\n        },\r\n        13: {\r\n          searchValue: /(\\d+)(\\d{3})(\\d{3})(\\d{4})(\\d{2})/,\r\n          newValue: \"$1.$2.$3/$4-$5\"\r\n        },\r\n        14: {\r\n          searchValue: /(\\d+)(\\d{3})(\\d{3})(\\d{4})(\\d{2})/,\r\n          newValue: \"$1.$2.$3/$4-$5\"\r\n        }\r\n      };\r\n\r\n      num = num.toString();\r\n      num = NgxCpfCnpj.getDigitos(num);\r\n      const replaceObject = replaceByLength[num.length];\r\n      num = num.replace(replaceObject.searchValue, replaceObject.newValue);\r\n    }\r\n    return num;\r\n  }\r\n\r\n  public static getDigitos(value) {\r\n    const regex = new RegExp(\"\\\\D\", \"g\");\r\n    return value.replace(regex, \"\");\r\n  }\r\n\r\n  public static cpfIsValid(value): boolean {\r\n    // Só faz a validação se o texto não for vazio.\r\n    // Se for vazio, validar campo requerido não é a responsabilidade desta validação\r\n    if (value.length > 0) {\r\n      let IsValid = false;\r\n      const cpf = NgxCpfCnpj.getDigitos(value); // Obtém o texto digitado no campo, remove tudo menos os digitos\r\n      if (cpf.length === 11) {\r\n        // Se digitou o CPF por completo\r\n        // Verificação dos CPF's que não respeitam a regra de validação mas não são válidos\r\n        const cpf_invalidos = [\r\n          \"00000000000\",\r\n          \"11111111111\",\r\n          \"22222222222\",\r\n          \"33333333333\",\r\n          \"44444444444\",\r\n          \"55555555555\",\r\n          \"66666666666\",\r\n          \"77777777777\",\r\n          \"88888888888\",\r\n          \"99999999999\"\r\n        ];\r\n        for (let i = 0; i < 10; i++) {\r\n          if (cpf === cpf_invalidos[i]) {\r\n            return IsValid;\r\n          }\r\n        }\r\n\r\n        // Calculando o Primeiro Dígito Verificador\r\n        let soma = 0; // Soma para o CPF \"ABC.DEF.GHI-XZ\": (A*10)+(B*9)+...+(H*3)+(I*2)\r\n        for (let i = 0; i < 9; i++) {\r\n          soma = soma + parseInt(cpf.charAt(i), 10) * (10 - i);\r\n        }\r\n        let dv = 0; // Primeiro dígito verificador (será zero se o resto da divisão de soma por 11 for < 2)\r\n        if (soma % 11 > 1) {\r\n          dv = 11 - (soma % 11);\r\n        }\r\n\r\n        if (parseInt(cpf.charAt(9), 10) !== dv) {\r\n          return IsValid;\r\n        }\r\n\r\n        // Calculando o Segundo Dígito Verificador\r\n        soma = 0; // Soma para o CPF \"ABC.DEF.GHI-XZ\": (A*11)+(B*10)+...+(H*4)+(I*3)+(X*2)\r\n        for (let i = 0; i < 10; i++) {\r\n          soma = soma + parseInt(cpf.charAt(i), 10) * (11 - i);\r\n        }\r\n        dv = 0; // Segundo dígito verificador (será zero se o resto da divisão de soma por 11 for < 2)\r\n        if (soma % 11 > 1) {\r\n          dv = 11 - (soma % 11);\r\n        }\r\n\r\n        if (parseInt(cpf.charAt(10), 10) !== dv) {\r\n          return IsValid;\r\n        }\r\n\r\n        IsValid = true;\r\n      }\r\n      return IsValid;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public static cnpjIsValid(value): boolean {\r\n    // Só faz a validação se o texto não for vazio.\r\n    // Se for vazio, validar campo requerido não é a responsabilidade desta validação\r\n    if (value.length > 0) {\r\n      let IsValid = false;\r\n      const cnpj = NgxCpfCnpj.getDigitos(value); // Obtém o texto digitado no campo, remove tudo menos os digitos\r\n\r\n      if (cnpj.length === 14) {\r\n        // Se digitou o CNPJ por completo\r\n        // Verificação do CNPJ que não respeita a regra de validação mas não são válidos\r\n        if (cnpj === \"00000000000000\") {\r\n          return IsValid;\r\n        }\r\n\r\n        // Calculando o Primeiro Dígito Verificador\r\n        let soma = 0; // Soma para o CNPJ \"AB.CDE.FGH/IJKL-XZ\": (A*5)+(B*4)+(C*3)+(D*2)+(E*9)+(F*8)+...+(K*3)+(L*2)\r\n        let mult = 5; // multiplicador\r\n        for (let i = 0; i < 12; i++) {\r\n          soma = soma + parseInt(cnpj.charAt(i), 10) * mult;\r\n          mult--; // decrementa o multiplicador\r\n          if (mult === 1) {\r\n            mult = 9;\r\n          } // volta o multiplicador para o valor 9 (para decrementar até o valor 2)\r\n        }\r\n        let dv = 0; // Primeiro dígito verificador (será zero se o resto da divisão de soma por 11 for < 2)\r\n        if (soma % 11 > 1) {\r\n          dv = 11 - (soma % 11);\r\n        }\r\n        if (parseInt(cnpj.charAt(12), 10) !== dv) {\r\n          return IsValid;\r\n        }\r\n\r\n        // Calculando o Segundo Dígito Verificador\r\n        soma = 0; // Soma para o CNPJ \"AB.CDE.FGH/IJKL-XZ\": (A*6)+(B*5)+(C*4)+(D*3)+(E*2)+(F*9)+...+(K*4)+(L*3)+(X*2)\r\n        mult = 6; // multiplicador\r\n        for (let i = 0; i < 13; i++) {\r\n          soma = soma + parseInt(cnpj.charAt(i), 10) * mult;\r\n          mult--; // decrementa o multiplicador\r\n          if (mult === 1) {\r\n            mult = 9;\r\n          } // volta o multiplicador para o valor 9 (para decrementar até o valor 2)\r\n        }\r\n        dv = 0; // Segundo dígito verificador (será zero se o resto da divisão de soma por 11 for < 2)\r\n        if (soma % 11 > 1) {\r\n          dv = 11 - (soma % 11);\r\n        }\r\n        if (parseInt(cnpj.charAt(13), 10) !== dv) {\r\n          return IsValid;\r\n        }\r\n\r\n        IsValid = true;\r\n      }\r\n      return IsValid;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { Directive } from \"@angular/core\";\r\nimport {\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  ValidatorFn,\r\n  FormControl\r\n} from \"@angular/forms\";\r\nimport { NgxCpfCnpj } from \"./ngx-cpf-cnpj\";\r\n\r\n@Directive({\r\n  selector: \"[nccCpfCnpjValidator] [ngModel]\",\r\n  providers: [\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: CpfCnpjValidatorDirective,\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class CpfCnpjValidatorDirective implements Validator {\r\n  validator: ValidatorFn;\r\n  constructor() {\r\n    this.validator = this.cpfCnpjValidator();\r\n  }\r\n\r\n  validate(c: FormControl) {\r\n    return this.validator(c);\r\n  }\r\n\r\n  cpfCnpjValidator(): ValidatorFn {\r\n    return (c: FormControl) => {\r\n      let value: string = <string>c.value;\r\n      if (value != null) {\r\n        value = NgxCpfCnpj.getDigitos(value);\r\n        if (value.length === 11) {\r\n          if (NgxCpfCnpj.cpfIsValid(value)) {\r\n            return null;\r\n          } else {\r\n            return {\r\n              cpfcnpjvalidator: {\r\n                valid: false\r\n              }\r\n            };\r\n          }\r\n        } else if (value.length === 14) {\r\n          if (NgxCpfCnpj.cnpjIsValid(value)) {\r\n            return null;\r\n          } else {\r\n            return {\r\n              cpfcnpjvalidator: {\r\n                valid: false\r\n              }\r\n            };\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        cpfcnpjvalidator: {\r\n          valid: false\r\n        }\r\n      };\r\n    };\r\n  }\r\n}\r\n","import { Directive, HostListener, Renderer2, ElementRef } from \"@angular/core\";\r\nimport { NgModel } from \"@angular/forms\";\r\nimport { NgxCpfCnpj } from \"./ngx-cpf-cnpj\";\r\n@Directive({\r\n  selector: \"[nccCpfCnpjMask]\"\r\n})\r\nexport class CpfCnpjMaskDirective {\r\n  constructor(private renderer: Renderer2, private el: ElementRef) {}\r\n\r\n  @HostListener(\"input\", [\"$event\"]) onInput(event) {\r\n    if (event.target.value.length <= 18) {\r\n      this.renderer.setProperty(\r\n        this.el.nativeElement,\r\n        \"value\",\r\n        NgxCpfCnpj.convertToCpfCnpj(event.target.value)\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CpfCnpjMaskDirective } from \"./cpf-cnpj-mask.directive\";\r\nimport { CpfCnpjValidatorDirective } from \"./cpf-cnpj-validator.directive\";\r\n\r\n@NgModule({\r\n  declarations: [CpfCnpjMaskDirective, CpfCnpjValidatorDirective],\r\n  imports: [],\r\n  exports: [CpfCnpjMaskDirective, CpfCnpjValidatorDirective]\r\n})\r\nexport class NgxCpfCnpjModule {}\r\n","import { FormControl } from \"@angular/forms\";\r\nimport { NgxCpfCnpj } from \"./ngx-cpf-cnpj\";\r\n\r\nexport interface ValidationResult {\r\n  [key: string]: boolean;\r\n}\r\n\r\nexport class CpfCnpjValidator {\r\n  public static validate(control: FormControl): ValidationResult {\r\n    return NgxCpfCnpj.cpfIsValid(control.value) ? null : { invalid: false };\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of ngx-cpf-cnpj\r\n */\r\n\r\nexport * from \"./lib/cpf-cnpj-validator.directive\";\r\nexport * from \"./lib/cpf-cnpj-mask.directive\";\r\nexport * from \"./lib/ngx-cpf-cnpj.module\";\r\nexport * from \"./lib/cpf-cnpj.validator\";\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {NgxCpfCnpj as ɵa} from './lib/ngx-cpf-cnpj';"],"names":[],"mappings":"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"}