var CpfCnpjValidatorDirective_1;
import { __decorate, __metadata } from "tslib";
import { Directive } from "@angular/core";
import { NG_VALIDATORS } from "@angular/forms";
import { NgxCpfCnpj } from "./ngx-cpf-cnpj";
let CpfCnpjValidatorDirective = CpfCnpjValidatorDirective_1 = class CpfCnpjValidatorDirective {
    constructor() {
        this.validator = this.cpfCnpjValidator();
    }
    validate(c) {
        return this.validator(c);
    }
    cpfCnpjValidator() {
        return (c) => {
            let value = c.value;
            if (value != null) {
                value = NgxCpfCnpj.getDigitos(value);
                if (value.length === 11) {
                    if (NgxCpfCnpj.cpfIsValid(value)) {
                        return null;
                    }
                    else {
                        return {
                            cpfcnpjvalidator: {
                                valid: false
                            }
                        };
                    }
                }
                else if (value.length === 14) {
                    if (NgxCpfCnpj.cnpjIsValid(value)) {
                        return null;
                    }
                    else {
                        return {
                            cpfcnpjvalidator: {
                                valid: false
                            }
                        };
                    }
                }
            }
            return {
                cpfcnpjvalidator: {
                    valid: false
                }
            };
        };
    }
};
CpfCnpjValidatorDirective = CpfCnpjValidatorDirective_1 = __decorate([
    Directive({
        selector: "[nccCpfCnpjValidator] [ngModel]",
        providers: [
            {
                provide: NG_VALIDATORS,
                useExisting: CpfCnpjValidatorDirective_1,
                multi: true
            }
        ]
    }),
    __metadata("design:paramtypes", [])
], CpfCnpjValidatorDirective);
export { CpfCnpjValidatorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3BmLWNucGotdmFsaWRhdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1jcGYtY25wai8iLCJzb3VyY2VzIjpbImxpYi9jcGYtY25wai12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQ0wsYUFBYSxFQUlkLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBWTVDLElBQWEseUJBQXlCLGlDQUF0QyxNQUFhLHlCQUF5QjtJQUVwQztRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVELFFBQVEsQ0FBQyxDQUFjO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsT0FBTyxDQUFDLENBQWMsRUFBRSxFQUFFO1lBQ3hCLElBQUksS0FBSyxHQUFtQixDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ3BDLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDakIsS0FBSyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3JDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxFQUFFLEVBQUU7b0JBQ3ZCLElBQUksVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTt3QkFDaEMsT0FBTyxJQUFJLENBQUM7cUJBQ2I7eUJBQU07d0JBQ0wsT0FBTzs0QkFDTCxnQkFBZ0IsRUFBRTtnQ0FDaEIsS0FBSyxFQUFFLEtBQUs7NkJBQ2I7eUJBQ0YsQ0FBQztxQkFDSDtpQkFDRjtxQkFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO29CQUM5QixJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7d0JBQ2pDLE9BQU8sSUFBSSxDQUFDO3FCQUNiO3lCQUFNO3dCQUNMLE9BQU87NEJBQ0wsZ0JBQWdCLEVBQUU7Z0NBQ2hCLEtBQUssRUFBRSxLQUFLOzZCQUNiO3lCQUNGLENBQUM7cUJBQ0g7aUJBQ0Y7YUFDRjtZQUVELE9BQU87Z0JBQ0wsZ0JBQWdCLEVBQUU7b0JBQ2hCLEtBQUssRUFBRSxLQUFLO2lCQUNiO2FBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBO0FBN0NZLHlCQUF5QjtJQVZyQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsaUNBQWlDO1FBQzNDLFNBQVMsRUFBRTtZQUNUO2dCQUNFLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixXQUFXLEVBQUUsMkJBQXlCO2dCQUN0QyxLQUFLLEVBQUUsSUFBSTthQUNaO1NBQ0Y7S0FDRixDQUFDOztHQUNXLHlCQUF5QixDQTZDckM7U0E3Q1kseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtcclxuICBOR19WQUxJREFUT1JTLFxyXG4gIFZhbGlkYXRvcixcclxuICBWYWxpZGF0b3JGbixcclxuICBGb3JtQ29udHJvbFxyXG59IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBOZ3hDcGZDbnBqIH0gZnJvbSBcIi4vbmd4LWNwZi1jbnBqXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogXCJbbmNjQ3BmQ25walZhbGlkYXRvcl0gW25nTW9kZWxdXCIsXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICB7XHJcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXHJcbiAgICAgIHVzZUV4aXN0aW5nOiBDcGZDbnBqVmFsaWRhdG9yRGlyZWN0aXZlLFxyXG4gICAgICBtdWx0aTogdHJ1ZVxyXG4gICAgfVxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIENwZkNucGpWYWxpZGF0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3Ige1xyXG4gIHZhbGlkYXRvcjogVmFsaWRhdG9yRm47XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnZhbGlkYXRvciA9IHRoaXMuY3BmQ25walZhbGlkYXRvcigpO1xyXG4gIH1cclxuXHJcbiAgdmFsaWRhdGUoYzogRm9ybUNvbnRyb2wpIHtcclxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRvcihjKTtcclxuICB9XHJcblxyXG4gIGNwZkNucGpWYWxpZGF0b3IoKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChjOiBGb3JtQ29udHJvbCkgPT4ge1xyXG4gICAgICBsZXQgdmFsdWU6IHN0cmluZyA9IDxzdHJpbmc+Yy52YWx1ZTtcclxuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICB2YWx1ZSA9IE5neENwZkNucGouZ2V0RGlnaXRvcyh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMTEpIHtcclxuICAgICAgICAgIGlmIChOZ3hDcGZDbnBqLmNwZklzVmFsaWQodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICBjcGZjbnBqdmFsaWRhdG9yOiB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZDogZmFsc2VcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZS5sZW5ndGggPT09IDE0KSB7XHJcbiAgICAgICAgICBpZiAoTmd4Q3BmQ25wai5jbnBqSXNWYWxpZCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgIGNwZmNucGp2YWxpZGF0b3I6IHtcclxuICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgY3BmY25wanZhbGlkYXRvcjoge1xyXG4gICAgICAgICAgdmFsaWQ6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuIl19